1. Write out a generic SELECT statement.

  SELECT <column_1, column_2, ... *> FROM <table1, table2 ...> WHERE <condition(s)>;

2. Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.

  Select - Silent
  Column - Cats
  From - Flying
  Table - to
  Where - West
  Condition - Coast

3. Create a pets database. Create a dogs table using this file. From the dogs table with the columns id, name, gender, age, weight, intake_date, breed, and in_foster, write statements to select the following pieces of data.

  Display the name, gender, and age of all dogs that are part Labrador.

  pets=# SELECT name, gender, age FROM dogs WHERE breed LIKE 'labrador%';
  name  | gender | age
  --------+--------+-----
  Boujee | F      |   3
  Marley | M      |   0
  (2 rows)

  Display the ids of all dogs that are under 1 year old.

  pets=# SELECT id FROM dogs WHERE age < 1;
  id
  -------
  10002
  10004
  (2 rows)

  Display the name and age of all dogs that are female and over 35lbs.

  pets=# SELECT name, age FROM dogs WHERE gender = 'F' AND weight >= 35;
    name  | age
  --------+-----
   Boujee |   3
  (1 row)

  Display all of the information about all dogs that are not Shepherd mixes.

  pets=# SELECT * FROM dogs WHERE breed NOT LIKE '%shepherd';
    id   |   name    | gender | age | weight |       breed        | intake_date | in_foster
  -------+-----------+--------+-----+--------+--------------------+-------------+------------
   10001 | Boujee    | F      |   3 |     36 | labrador poodle    | 2017-06-22  |
   10002 | Munchkin  | F      |   0 |      8 | dachsund chihuahua | 2017-01-13  | 2017-01-31
   10004 | Marley    | M      |   0 |     10 | labrador           | 2017-05-04  | 2016-06-20
   10006 | Marmaduke | M      |   7 |    150 | great dane         | 2016-03-22  | 2016-05-15
   10007 | Rosco     | M      |   5 |    180 | rottweiler         | 2017-04-01  |
  (5 rows)

  Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.

  pets=# SELECT id, age, weight, breed FROM dogs WHERE weight > 60 OR breed = 'great dane';
  id   | age | weight |   breed
  -------+-----+--------+------------
  10006 |   7 |    150 | great dane
  10007 |   5 |    180 | rottweiler
  (2 rows)


4. From the cats table below, what pieces of data would be returned from these queries?
SELECT name, adoption_date FROM cats;

  name      adoption_date
  Mushi	    2016-03-22
  Seashell
  Azul	    2016-04-17
  Victoire	2016-09-01
  Nala

SELECT name, age FROM cats;

  name	   	 age
  Mushi		   1
  Seashell	 7
  Azul		   3
  Victoire	 7
	Nala		   1



5. From the cats table, write queries to select the following pieces of data.
Display all the information about all of the available cats.

  SELECT * FROM cats;

Choose one cat of each age to show to potential adopters.

  SELECT DISTINCT name, age FROM cats;

Find all of the names of the cats, so you don’t choose duplicate names for new cats.

  SELECT name FROM cats;

6. List each comparison operator and explain, in your own words, when you would use it. Include a real world example for each.
If you can’t list these from memory, do these flashcards until you can!

  = equal to, used when querying an entry equal to some value.
  SELECT * FROM pets WHERE age = 4;

  > greater than, used when querying for an entry where some column is greater
  than some value.
  SELECT * FROM pets WHERE weight > 10;

  >= greater than or equal to, used when querying for an entry where some column
  is greater than or equal to  some value.
  SELECT * FROM users WHERE age >= 21;

  < less than used when querying for an entry where some column is less than
  some value.
  SELECT * FROM users WHERE age < 20;

  <= less than or equal to, used when querying for an entry where some column
  is less than or equal to  some value.
  SELECT * FROM users WHERE age <= 65;

  != not equal to, used when querying for an entry where a value is not equal
  to the value being compared.
  SELECT * FROM users WHERE name != 'Mike';

  <> greater than or less than, used when querying for an entry with a value
  greater than or less than some value.
  SELECT * FROM pets WHERE age <> 10;

  LIKE -> used when querying for an entry which contains some value as part of
  a value
  SELECT * FROM users WHERE email LIKE '%@gmail.com';

  BETWEEN -> used when querying a value which is less than some value but greater
  than another.
  SELECT * FORM users WHERE age BETWEEN 18 AND 65;

  IS DISTINCT FROM -> used just like the <> operator, but can handle null inputs.
  SELECT * FROM users WHERE name IS DISTINCT FROM 'bob';

  IS TRUE / IS FALSE -> used to evaluate an expression.
  SELECT * FROM users WHERE subscribed IS TRUE;

  AND -> used for multiple comparisons where both conditions need to be truthy.
  SELECT * FROM pets WHERE age > 3 AND gender = 'F';

  OR -> used for multiple comparisons where at least one condition needs to
  be truthy.
  SELECT * FROM users WHERE age > 21 OR country = 'Canada';

  NOT -> returns the row when the expression evaluates to falsey.
  SELCT * FROM users WHERE NOT country = 'US';

7. From the cats table below, what data would be returned from these queries?
SELECT name FROM cats WHERE gender = ‘F’;

  name
  Seashell
  Nala

SELECT name FROM cats WHERE age <> 3;

  name
  Mushi
  Seashell
  Victoire
  Nala

SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;

  id
  00003
  00004
