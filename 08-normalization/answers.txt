1. In your own words, explain the benefits of normalization. Include a
real-world scenario where normalization is necessary.

  Normalization of a database improves data integrity by eliminating redundancy
  in table, it optimizes joins by organizing data more efficiently and logically.
  It improves index creation and sorting, as well as write performance, and
  improved concurrency by reducing the number of table locks.

  A real world scenario where normalization is necessary is in banking/financial
  applications. Data integrity is critically important when dealing with money,
  and databases of these type tend to be write intensive, i.e. many financial
  transactions.

2. List and explain the different normal forms and how they relate to one
another, with regard to your real-world scenario in the first question.

  1NF - A column in a table can't contain multiple values. In the banking
  example, if a customer has multiple accounts with the bank, they cannot appear
  in the same accounts column in the customer table. Instead there would need to
  be multiple entries, one for each account.

  2NF - A second normal form database must adhere to 1NF, and all non-key
  attributes cannot depend on a subset of the primary key. In the banking example
  above, our customer table would have information about the customer, such as
  name, phone number, address, SSN, and transaction information. Since transaction
  information is only dependant on the customers unique ID and none of the other
  customer info, the customers transactions would need to be in a separate table
  in order to adhere to 2NF.

  3NF - Transitive relationships between non-prime attributes cannot exist in
  the database, in addition to being 2NF. In the above example, there might be a
  table with each individual that the account holder has transacted with,
  including an id, name, account number, bank code number and bank name. Since
  bank name is functionally dependant on bank code number, which is not a primary
  key in this table, the table would need to be broken up to comply with 3NF.
  There would be a table with the counterparty information, containing id, name,
  account number and bank code number. The second table would contain bank code
  number and bank name.

  BCNF - An extenstion of 3NF where every dependency X -> Y, X must be a super
  key of the table. In the above example, id is the super key of the first table,
  and bank code is the super key of the second table. So the bank id would be
  removed from the counterparty table and a third table would be created with
  the columns id and bank id.

3. The student_records table below shows the students and their grades in
different subjects. The table is already in first normal form (1NF). Convert
this table to the third normal form (3NF) using the techniques you learned in
this checkpoint.

  entry_id | student_id |	professor_id | grade
  ---------|------------|--------------|------
   1       | 1          | 2            | A
   2       | 2          | 2            | C
   3       | 3          | 1            | A
   4       | 4          | 3            | B
   5       | 5          | 1            | B


  student_id | student_email          | student_name
  -----------|------------------------|--------------
   1         |john.b20@hogwarts.edu   | John B
   2         |sarah.s20@hogwarts.edu  | Sarah S
   3         |martha.l20@hogwarts.edu | Martha L
   4         |james.g20@hogwarts.edu  | James G
   5         |stanley.p20@hogwarts.edu| Stanley P

   professor_id | professor_name | subject
   -------------|----------------|------------
    1           | Natalie M      | Economics
    2           | William C      | Philosophy
    3           | Mark W         | Mathematics

4. In your own words, explain the potential disadvantages of normalizing the
data above. What are its trade-offs? Discuss this with your mentor.

  Disadvantages of normalizing data are the increase in complexity in designing
  a normalized database. Database queries also get more complex as data is spread
  out into multiple tables requiring multiple joins. As the database grows
  performance slows down as well, joins are an expensive operation to perform
  on a DB, and querying large datasets with multiple joins becomes slow.

5. Looking at the tables you have normalized. If you need to denormalize to
improve query performance or speed up reporting, how would you carry out
denormalization for this database design? Discuss potential strategies with
your mentor.

  In order to denormalize the table, I would combine all of these tables back
  into 1 table in order minimize the number of join operations required in
  my database queries. 
